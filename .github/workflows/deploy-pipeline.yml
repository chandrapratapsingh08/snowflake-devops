name: Deploy data pipeline

# Action will run on pushes to selected branches
on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read
  deployments: write

jobs:
  deploy:
    runs-on: ubuntu-22.04
    
    env:
      SNOWFLAKE_ACCOUNT: ${{ vars.SNOWFLAKE_ACCOUNT }}
      REPO_NAME: snowflake_devops
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
    
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
    
      - name: Install dependencies
        run: |
          pip install pyjwt cryptography

      - name: Install Dependencies
        run: pip install jinja2-cli

      - name: Decode private key
        id: decode-private-key
        run: |
          # Decode the Base64-encoded private key
          echo "${{ secrets.SNOWFLAKE_PRIVATE_KEY_BASE64 }}" | base64 --decode > rsa_key.p8

      - name: Generate Snowflake config.toml
        run: |
          mkdir -p .snowflake
          cat <<EOF > .snowflake/config.toml      
          [connections]
          [connections.workflow]
          account = "${{ vars.SNOWFLAKE_ACCOUNT }}"
          user = "${{ vars.SNOWFLAKE_DEVOPS_USER }}"
          role = "ACCOUNTADMIN"
          authenticator = "${{ vars.SNOWFLAKE_DEFAULT_AUTHENTICATOR }}"
          warehouse = "${{ vars.SNOWFLAKE_DEVOPS_WAREHOUSE }}"
          database = "${{ vars.SNOWFLAKE_DEVOPS_DB }}"
          schema = "${{ vars.SNOWFLAKE_DEVOPS_SCHEMA }}"
          private_key_file = "rsa_key.p8"
          EOF

      - name: Updated Permission for config.toml
        run: |
          chmod 0600 .snowflake/config.toml
          chown $USER .snowflake/config.toml

      - name: Install Snowflake CLI
        uses: Snowflake-Labs/snowflake-cli-action@v1.5
        with:
          cli-version: "latest"
          default-config-file-path: ".snowflake/config.toml"

      - name: Generate Figerprint for JWT
        id: generate-fingerprint
        run: |
          python -c "
          from cryptography.hazmat.primitives.serialization import load_pem_private_key
          from cryptography.hazmat.primitives.serialization import Encoding, PublicFormat
          from cryptography.hazmat.backends import default_backend
          import base64
          import hashlib

          # Load the private key from the file
          with open('rsa_key.p8', 'rb') as pem_in:
              pemlines = pem_in.read()
              try:
                  # Try to access the private key without a passphrase
                  private_key = load_pem_private_key(pemlines, None, default_backend())
              except TypeError:
                  # If the key is encrypted, provide the passphrase
                  private_key = load_pem_private_key(pemlines, b'${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSWORD }}', default_backend())

          # Get the raw bytes of the public key
          public_key_raw = private_key.public_key().public_bytes(Encoding.DER, PublicFormat.SubjectPublicKeyInfo)

          # Get the SHA-256 hash of the raw bytes
          sha256hash = hashlib.sha256()
          sha256hash.update(public_key_raw)

          # Base64-encode the value and prepend the prefix 'SHA256:'
          public_key_fp = 'SHA256:' + base64.b64encode(sha256hash.digest()).decode('utf-8')

          # Print the public key fingerprint for debugging
          print('Public Key Fingerprint:', public_key_fp)

          # Save the fingerprint to an environment variable for use in the next step
          with open('$GITHUB_ENV', 'a') as env_file:
              env_file.write(f'PUBLIC_KEY_FP={public_key_fp}\n')
          "
    
      - name: Decode private key and generate JWT
        id: generate-jwt
        run: | 
          python -c "
          from datetime import timedelta, timezone, datetime
          import jwt

          # Construct the fully qualified name of the user in uppercase.
          account = '${{ vars.SNOWFLAKE_ACCOUNT }}'
          if not '.global' in account:
              idx = account.find('.')
              if idx > 0:
                  account = account[0:idx]
              else:
                  idx = account.find('-')
                  if idx > 0:
                      account = account[0:idx]

          account = account.upper()
          user = '${{ vars.SNOWFLAKE_DEVOPS_USER }}'.upper()
          qualified_username = account + '.' + user

          now = datetime.now(timezone.utc)
          lifetime = timedelta(minutes=59)

          payload = {
              'iss': qualified_username + '.' + public_key_fp,
              'sub': qualified_username,
              'iat': now,
              'exp': now + lifetime
          }

          encoding_algorithm = 'RS256'
          token = jwt.encode(payload, key=private_key, algorithm=encoding_algorithm)

          if isinstance(token, bytes):
              token = token.decode('utf-8')
          decoded_token = jwt.decode(token, key=private_key.public_key(), algorithms=[encoding_algorithm])
          print('Generated a JWT with the following payload:\n{}'.format(decoded_token))
          "

      - name: Perform a Snowflake connectivity test
        env:
          SNOWFLAKE_CONNECTIONS_DEFAULT_JWT: ${{ steps.generate-jwt.outputs.jwt }}
          SNOWFLAKE_DEBUG: true  # Enable debugging
          PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSWORD }}
        run: |
          snow connection list
          # Disable connection test as it relies upon databases and schemas
          # that might not be in place yet.
        # snow connection test -c workflow --debug

      - name: Fetch repository changes
        env:
          SNOWFLAKE_CONNECTIONS_DEFAULT_JWT: ${{ steps.generate-jwt.outputs.jwt }}
          SNOWFLAKE_DEBUG: true  # Enable debugging
          PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSWORD }}
        run: snow git fetch snowflake_devops -c workflow --debug

      - name: Run Setup snowflake sql
        env:
          SNOWFLAKE_CONNECTIONS_DEFAULT_JWT: ${{ steps.generate-jwt.outputs.jwt }}
          SNOWFLAKE_DEBUG: true  # Enable debugging
          PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSWORD }}
        run: |
          BRANCH_NAME="main"
          if [ "${BRANCH_NAME}" == "main" ]; then
            RETENTION_TIME=1
          else
            RETENTION_TIME=0
          fi
          snow git execute \
            "@${REPO_NAME}/branches/${BRANCH_NAME}/steps/0[134]_*" \
            -D "environment='${BRANCH_NAME}'" \
            -D "retention_time=${RETENTION_TIME}"