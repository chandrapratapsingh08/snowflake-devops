name: Deploy data pipeline

# Action will run on pushes to selected branches
on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read
  deployments: write

jobs:
  deploy:
    runs-on: ubuntu-22.04
    
    env:
      SNOWFLAKE_ACCOUNT: ${{ vars.SNOWFLAKE_ACCOUNT }}
      REPO_NAME: snowflake_devops
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
    
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
    
      - name: Install dependencies
        run: |
          pip install pyjwt cryptography

      - name: Install Dependencies
        run: pip install jinja2-cli

      - name: Decode private key
        id: decode-private-key
        run: |
          # Decode the Base64-encoded private key
          echo "${{ secrets.SNOWFLAKE_PRIVATE_KEY_BASE64 }}" | base64 --decode > rsa_key.p8

      - name: Generate Snowflake config.toml
        run: |
          mkdir -p .snowflake
          cat <<EOF > .snowflake/config.toml      
          [connections]
          [connections.workflow]
          account = "${{ vars.SNOWFLAKE_ACCOUNT }}"
          user = "${{ vars.SNOWFLAKE_DEVOPS_USER }}"
          role = "ACCOUNTADMIN"
          authenticator = "${{ vars.SNOWFLAKE_DEFAULT_AUTHENTICATOR }}"
          warehouse = "${{ vars.SNOWFLAKE_DEVOPS_WAREHOUSE }}"
          database = "${{ vars.SNOWFLAKE_DEVOPS_DB }}"
          schema = "${{ vars.SNOWFLAKE_DEVOPS_SCHEMA }}"
          private_key_file = "rsa_key.p8"
          EOF

      - name: Updated Permission for config.toml
        run: |
          chmod 0600 .snowflake/config.toml
          chown $USER .snowflake/config.toml

      - name: Install Snowflake CLI
        uses: Snowflake-Labs/snowflake-cli-action@v1.5
        with:
          cli-version: "latest"
          default-config-file-path: ".snowflake/config.toml"
    
      - name: Decode private key and generate JWT
        id: generate-jwt
        run: |  
          # Generate the JWT using the decoded private key and password
          python -c "
          from cryptography.hazmat.primitives import serialization
          import jwt
          import datetime
          
          # Load the encrypted private key
          with open('rsa_key.p8', 'rb') as key_file:
              private_key = serialization.load_pem_private_key(
                  key_file.read(),
                  password='${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSWORD }}'.encode(),
              )
          
          # Create the JWT payload
          payload = {
              'iss': '${{ vars.SNOWFLAKE_ACCOUNT }}.${{ vars.SNOWFLAKE_USER }}',
              'sub': '${{ vars.SNOWFLAKE_ACCOUNT }}.${{ vars.SNOWFLAKE_USER }}',
              'iat': datetime.datetime.utcnow(),
              'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=5),
          }
          
          # Generate the JWT
          token = jwt.encode(payload, private_key, algorithm='RS256')
          with open('$GITHUB_OUTPUT', 'a') as f:
              f.write(f'JWT={token}\n')
          print(token)
          "

      - name: Perform a Snowflake connectivity test
        env:
          SNOWFLAKE_CONNECTIONS_DEFAULT_JWT: ${{ steps.generate-jwt.outputs.jwt }}
          SNOWFLAKE_DEBUG: true  # Enable debugging
          PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSWORD }}
        run: |
          snow connection list
          # Disable connection test as it relies upon databases and schemas
          # that might not be in place yet.
        # snow connection test -c workflow --debug

      - name: Fetch repository changes
        env:
          SNOWFLAKE_CONNECTIONS_DEFAULT_JWT: ${{ steps.generate-jwt.outputs.jwt }}
          SNOWFLAKE_DEBUG: true  # Enable debugging
          PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSWORD }}
        run: snow git fetch snowflake_devops

      - name: Run Setup snowflake sql
        env:
          SNOWFLAKE_CONNECTIONS_DEFAULT_JWT: ${{ steps.generate-jwt.outputs.jwt }}
          SNOWFLAKE_DEBUG: true  # Enable debugging
          PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSWORD }}
        run: |
          BRANCH_NAME="main"
          if [ "${BRANCH_NAME}" == "main" ]; then
            RETENTION_TIME=1
          else
            RETENTION_TIME=0
          fi
          snow git execute \
            "@${REPO_NAME}/branches/${BRANCH_NAME}/steps/0[134]_*" \
            -D "environment='${BRANCH_NAME}'" \
            -D "retention_time=${RETENTION_TIME}"