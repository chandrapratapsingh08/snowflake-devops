name: Deploy data pipeline

# Action will run on pushes to selected branches
on:
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
    SNOWFLAKE_DEFAULT_CONNECTION_NAME: "workflow"
    SNOWFLAKE_CONNECTIONS_WORKFLOW_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
    SNOWFLAKE_CONNECTIONS_DEFAULT_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
    SNOWFLAKE_CONNECTIONS_WORKFLOW_USER: ${{ secrets.SNOWFLAKE_USER }}
    SNOWFLAKE_CONNECTIONS_WORKFLOW_PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSWORD }}
    SNOWFLAKE_CONNECTIONS_WORKFLOW_PRIVATE_KEY_RAW: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_RAW }}
    GIT_REPO_DB: MY_GIT_REPOS
    GIT_REPO_SCHEMA: GITHUB
    GIT_REPO_NAME: snowflake_devops

jobs:
  deploy:
    runs-on: ubuntu-22.04
    
    env:
      SNOWFLAKE_CONNECTIONS_DEFAULT_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_CONNECTIONS_DEFAULT_USER: ${{ secrets.SNOWFLAKE_USER }}
      REPO_NAME: snowflake_devops
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
    
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
    
      - name: Install dependencies
        run: |
          pip install pyjwt cryptography
    
      - name: Decode private key
        id: decode-private-key
        run: |
          # Decode the Base64-encoded private key
          echo "${{ secrets.SNOWFLAKE_PRIVATE_KEY }}" | base64 --decode > rsa_key.p8
    
      - name: Install snowflake-cli
        uses: Snowflake-Labs/snowflake-cli-action@v1.5
        with:
          cli-version: "latest"
          default-config-file-path: ".snowflake/config.toml"

      - name: Generate JWT token
        id: generate-jwt
        run: |
          # Generate the JWT token using the Snowflake CLI
          JWT=$(snow connection generate-jwt \
            --private-key-file rsa_key.p8 \
            --account ${{ secrets.SNOWFLAKE_ACCOUNT }} \
            --user ${{ secrets.SNOWFLAKE_USER }})
          
          # Output the JWT token for use in subsequent steps
          echo "JWT=$JWT" >> $GITHUB_OUTPUT
          echo "Generated JWT Token: $JWT"
    
      - name: Debug JWT Token
        run: |
          echo "Generated JWT Token:"
          echo "${{ steps.generate-jwt.outputs.JWT }}"
          echo "Decoded JWT Payload:"
          echo "${{ steps.generate-jwt.outputs.JWT }}" | cut -d '.' -f 2 | base64 -d | jq
    
      - name: Perform a Snowflake connectivity test
        env:
          SNOWFLAKE_CONNECTIONS_DEFAULT_JWT: ${{ steps.generate-jwt.outputs.JWT }}
          SNOWFLAKE_DEBUG: true  # Enable debugging
          PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSWORD }}
        run: |
          snow connection list
          snow connection test -c workflow --debug

      - name: Fetch repository changes
        env:
          SNOWFLAKE_CONNECTIONS_DEFAULT_JWT: ${{ steps.generate-jwt.outputs.JWT }}
          SNOWFLAKE_DEBUG: true  # Enable debugging
          PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSWORD }}
        run: snow git fetch snowflake_devops

      - name: Run Setup snowflake sql
        env:
          SNOWFLAKE_CONNECTIONS_DEFAULT_JWT: ${{ steps.generate-jwt.outputs.JWT }}
          SNOWFLAKE_DEBUG: true  # Enable debugging
          PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_PRIVATE_KEY_PASSWORD }}
        run: |
          BRANCH_NAME="main"
          if [ "${BRANCH_NAME}" == "main" ]; then
            RETENTION_TIME=1
          else
            RETENTION_TIME=0
          fi
          snow git execute \
            "@${REPO_NAME}/branches/${BRANCH_NAME}/steps/0[134]_*" \
            -D "environment='${BRANCH_NAME}'" \
            -D "retention_time=${RETENTION_TIME}"